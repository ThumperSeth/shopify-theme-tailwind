{%- render 'main-cart-items-snippet' -%}

{{ 'component-cart.css' | asset_url | stylesheet_tag }}
{{ 'component-totals.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'component-discounts.css' | asset_url | stylesheet_tag }}

<div class="page-width{% if cart == empty %} is-empty{% endif %}" id="main-cart-footer" data-id="{{ section.id }}">
    <div>
        <div class="cart__footer">
            {%- if section.settings.show_cart_note -%}
            <cart-note class="cart__note field">
                <label for="Cart-note">{{ 'sections.cart.note' | t }}</label>
                <textarea class="text-area text-area--resize-vertical field__input" name="note" form="cart"
                    id="Cart-note" placeholder="{{ 'sections.cart.note' | t }}">{{ cart.note }}</textarea>
            </cart-note>
            {%- endif -%}

            <div class="cart__blocks">
                <div class="js-contents">
                    <div class="totals">
                        <h3 class="totals__subtotal">{{ 'sections.cart.subtotal' | t }}</h3>
                        <p class="totals__subtotal-value">{{ cart.total_price | money_with_currency }}</p>
                    </div>

                    <div>
                        {%- if cart.cart_level_discount_applications.size > 0 -%}
                        <ul class="discounts list-unstyled" role="list"
                            aria-label="{{ 'customer.order.discount' | t }}">
                            {%- for discount in cart.cart_level_discount_applications -%}
                            <li class="discounts__discount discounts__discount--end">
                                {%- render 'icon-discount' -%}
                                {{ discount.title }}
                                (-{{ discount.total_allocated_amount | money }})
                            </li>
                            {%- endfor -%}
                        </ul>
                        {%- endif -%}
                    </div>

                    <div class="cart__ctas">
                        <noscript>
                            <button type="submit" class="cart__update-button button button--secondary" form="cart">
                                {{ 'sections.cart.update' | t }}
                            </button>
                        </noscript>

                        <button type="submit" id="checkout" class="cart__checkout-button button" name="checkout" {% if
                            cart==empty %} disabled{% endif %} form="cart">
                            {{ 'sections.cart.checkout' | t }}
                        </button>
                    </div>

                    {%- if additional_checkout_buttons -%}
                    <div class="cart__dynamic-checkout-buttons additional-checkout-buttons">
                        {{ content_for_additional_checkout_buttons }}
                    </div>
                    {%- endif -%}



                    <div id="cart-errors"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        class CartNote extends HTMLElement {
            constructor() {
                super();

                this.addEventListener('change', debounce((event) => {
                    const body = JSON.stringify({ note: event.target.value });
                    fetch(`${routes.cart_update_url}`, { ...fetchConfig(), ...{ body } });
                }, 300))
            }
        }

        customElements.define('cart-note', CartNote);



        document.addEventListener('DOMContentLoaded', function () {
            function isIE() {
                const ua = window.navigator.userAgent;
                const msie = ua.indexOf('MSIE ');
                const trident = ua.indexOf('Trident/');

                return (msie > 0 || trident > 0);
            }

            if (!isIE()) return;
            const cartSubmitInput = document.createElement('input');
            cartSubmitInput.setAttribute('name', 'checkout');
            cartSubmitInput.setAttribute('type', 'hidden');
            document.querySelector('#cart').appendChild(cartSubmitInput);
            document.querySelector('#checkout').addEventListener('click', function (event) {
                document.querySelector('#cart').submit();
            });
        });

        class CartRemoveButton extends HTMLElement {
            constructor() {
                super();
                this.addEventListener('click', (event) => {
                    event.preventDefault();
                    this.closest('cart-items').updateQuantity(this.dataset.index, 0);
                });
            }
        }

        customElements.define('cart-remove-button', CartRemoveButton);

        class CartItems extends HTMLElement {
            constructor() {
                super();

                this.lineItemStatusElement = document.getElementById('shopping-cart-line-item-status');

                this.currentItemCount = Array.from(this.querySelectorAll('[name="updates[]"]'))
                    .reduce((total, quantityInput) => total + parseInt(quantityInput.value), 0);

                this.debouncedOnChange = debounce((event) => {
                    this.onChange(event);
                }, 300);

                this.addEventListener('change', this.debouncedOnChange.bind(this));
            }

            onChange(event) {
                this.updateQuantity(event.target.dataset.index, event.target.value, document.activeElement.getAttribute('name'));
            }

            getSectionsToRender() {
                return [
                    {
                        id: 'main-cart-items',
                        section: document.getElementById('main-cart-items').dataset.id,
                        selector: '.js-contents',
                    },
                    {
                        id: 'cart-icon-bubble',
                        section: 'cart-icon-bubble',
                        selector: '.shopify-section'
                    },
                    {
                        id: 'cart-live-region-text',
                        section: 'cart-live-region-text',
                        selector: '.shopify-section'
                    },
                    {
                        id: 'main-cart-footer',
                        section: document.getElementById('main-cart-footer').dataset.id,
                        selector: '.js-contents',
                    }
                ];
            }

            updateQuantity(line, quantity, name) {
                this.enableLoading(line);

                const body = JSON.stringify({
                    line,
                    quantity,
                    sections: this.getSectionsToRender().map((section) => section.section),
                    sections_url: window.location.pathname
                });

                fetch(`${routes.cart_change_url}`, { ...fetchConfig(), ...{ body } })
                    .then((response) => {
                        return response.text();
                    })
                    .then((state) => {
                        const parsedState = JSON.parse(state);
                        this.classList.toggle('is-empty', parsedState.item_count === 0);
                        const cartFooter = document.getElementById('main-cart-footer');

                        if (cartFooter) cartFooter.classList.toggle('is-empty', parsedState.item_count === 0);

                        this.getSectionsToRender().forEach((section => {
                            const elementToReplace =
                                document.getElementById(section.id).querySelector(section.selector) || document.getElementById(section.id);

                            elementToReplace.innerHTML =
                                this.getSectionInnerHTML(parsedState.sections[section.section], section.selector);
                        }));

                        this.updateLiveRegions(line, parsedState.item_count);
                        const lineItem = document.getElementById(`CartItem-${line}`);
                        if (lineItem && lineItem.querySelector(`[name="${name}"]`)) lineItem.querySelector(`[name="${name}"]`).focus();
                        this.disableLoading();
                    }).catch(() => {
                        this.querySelectorAll('.loading-overlay').forEach((overlay) => overlay.classList.add('hidden'));
                        document.getElementById('cart-errors').textContent = window.cartStrings.error;
                        this.disableLoading();
                    });
            }

            updateLiveRegions(line, itemCount) {
                if (this.currentItemCount === itemCount) {
                    document.getElementById(`Line-item-error-${line}`)
                        .querySelector('.cart-item__error-text')
                        .innerHTML = window.cartStrings.quantityError.replace(
                            '[quantity]',
                            document.getElementById(`Quantity-${line}`).value
                        );
                }

                this.currentItemCount = itemCount;
                this.lineItemStatusElement.setAttribute('aria-hidden', true);

                const cartStatus = document.getElementById('cart-live-region-text');
                cartStatus.setAttribute('aria-hidden', false);

                setTimeout(() => {
                    cartStatus.setAttribute('aria-hidden', true);
                }, 1000);
            }

            getSectionInnerHTML(html, selector) {
                return new DOMParser()
                    .parseFromString(html, 'text/html')
                    .querySelector(selector).innerHTML;
            }

            enableLoading(line) {
                document.getElementById('main-cart-items').classList.add('cart__items--disabled');
                this.querySelectorAll(`#CartItem-${line} .loading-overlay`).forEach((overlay) => overlay.classList.remove('hidden'));
                document.activeElement.blur();
                this.lineItemStatusElement.setAttribute('aria-hidden', false);
            }

            disableLoading() {
                document.getElementById('main-cart-items').classList.remove('cart__items--disabled');
            }
        }

        customElements.define('cart-items', CartItems);

    </script>